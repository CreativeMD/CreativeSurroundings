// Credit for getting Mixins to work:
// https://github.com/Darkhax-Minecraft/Nautilus/blob/master/build.gradle

buildscript {
    repositories {
        jcenter()
        maven {
        	name = "Forge"
        	url 'http://files.minecraftforge.net/maven'
        }
    	maven {
		    url 'http://repo.spongepowered.org/maven'
	    }
        maven {
        	url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
		classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.4.0'
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'maven-publish' 

apply from: 'configuration.gradle'

if (file('secrets.properties').exists()) {
	println "Loading parameters from secrets.properties"
	ext.secrets = new Properties()
	file('secrets.properties').withReader {ext.secrets.load(it)}
}

repositories {
    maven { url "http://chickenbones.net/maven/" }
    maven { url "http://dvs1.progwml6.com/files/maven" }
    maven { url "http://maven.tterrag.com" }
    maven { url "https://repo.elytradev.com/" }
    maven { url 'http://repo.spongepowered.org/maven' }
    maven { url 'https://maven.mcmoddev.com' }
    maven { url "https://maven.blamejared.com/" }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

minecraft {
	if (project.ext.has('secrets')) {
		if (project.ext.secrets.uuid != null)
    		clientRunArgs.AddAll(["--uuid ${project.ext.secrets.uuid}"])
    	if (project.ext.secrets.username != null)
    		clientRunArgs.AddAll(["--username ${project.ext.secrets.username}"])
    	if (project.ext.secrets.password != null)
    		clientRunArgs.AddAll(["--password ${project.ext.secrets.password}"])
    	if (project.ext.secrets.jvmArgs != null) {
    		clientJvmArgs.AddAll(project.ext.secrets.jvmArgs)
    		serverJvmArgs.AddAll(project.ext.secrets.jvmArgs)
    	}
    }

    runDir = "run"
    replace '@VERSION@', project.ext.modVersion
    replace '@FINGERPRINT@', project.ext.fingerprint
    replace '@UPDATEURL@', project.ext.updateurl
    mappings = project.ext.snapshot
}

sourceSets {
    main {
        ext.refMap = "mixins.dsurround.refmap.json"
    }
}

dependencies {
	compile "craftstudio-api:CraftStudioAPI-universal-1.0.1.95:mc1.12:alpha"
    compile "com.animania:animania-${project.mcVersion}-base:${project.animaniaBaseVersion}"
    compile "com.animania:animania-${project.mcVersion}-farm:${project.animaniaFarmVersion}"
    compile "com.animania:animania-${project.mcVersion}-extra:${project.animaniaExtraVersion}"
	compile "serene-seasons:SereneSeasons-${project.mcVersion}:${project.ssVersion}:universal"
	compile "codechicken-lib-1-8:CodeChickenLib-1.12.2:3.2.3.358:universal"
	compile "forge-multipart-cbe:ForgeMultipart-1.12.2:2.6.2.83:universal"
	compile "ctm:CTM:MC1.12.2:${project.ctmVersion}"
	compile "cosmetic-armor-reworked:CosmeticArmorReworked:1.12.2:v3"
	compile "littletiles:LittleTiles_v1.5.0:pre169_mc1.12.2"
	compile "iron-chests:ironchest:1.12.2:7.0.72.847"
    compile "biomes-o-plenty:BiomesOPlenty-1.12.2:7.0.1.2441:universal"
    compile "org.spongepowered:mixin:0.8.2"
    compile 'mcjty.theoneprobe:TheOneProbe-1.12:1.12-1.4.28-17'

	//compile "creativecore:CreativeCore_v1.9.35_mc1.12.2"

    deobfCompile "mezz.jei:jei_${project.mcVersion}:${project.jeiVersion}:api"
    runtime "mezz.jei:jei_${project.mcVersion}:${project.jeiVersion}"
    deobfCompile "team.chisel:Chisel:MC${project.mcVersion}-${project.chiselVersion}"

    if (fileTree(dir: 'libs').filter { it.name.startsWith('OreLib') }.getFiles().size() == 0)
        compile "orelib:OreLib:1.12.2:3.6.0.1"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else that's not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    // Add CREDITS.md
    into('/') {
        from('CREDITS.md')
    }
    
    manifest.attributes(
        "FMLCorePluginContainsFMLMod": "true",
        "ForceLoadAsMod": "true",
	    "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
        "MixinConfigs": "mixins.dsurround.json",
        "FMLCorePlugin": "org.orecruncher.dsurround.mixins.TransformLoader"
    )
}

// https://gist.github.com/matthewprenger/9b2da059b89433a01c1c
task signJar(type: SignJar) {
    onlyIf { // Skip the task if our secret data isn't available
        project.hasProperty('keyStore')
    }

    keyStore = project.keyStore // This needs to be a path to the keystore file
    alias = project.keyStoreAlias
    storePass = project.keyStorePass
    keyPass = project.keyStoreKeyPass
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

build.dependsOn signJar
